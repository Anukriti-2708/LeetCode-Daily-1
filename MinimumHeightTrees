class Solution {
    public List<Integer> findMinHeightTrees(int n, int[][] edges) {
    if (n == 1) return Collections.singletonList(0);

    List<Set<Integer>> adj = new ArrayList<>(n);
    for (int i = 0; i < n; ++i) adj.add(new HashSet<>());
    // create a graph adjacent list, 
    //0: <1>
    //1: <0,2,3>
    //2: <1>
    //3: <1>
    for (int[] edge : edges) {
        adj.get(edge[0]).add(edge[1]);
        adj.get(edge[1]).add(edge[0]);
    }
    // leaves: only one connection with others , only one edge: 0,2,3
    List<Integer> leaves = new ArrayList<>();
    for (int i = 0; i < n; ++i)
        if (adj.get(i).size() == 1) leaves.add(i);
    
    while (n > 2) {
        n -= leaves.size(); 
        List<Integer> newLeaves = new ArrayList<>(); 
        for (int i : leaves) {
            int j = adj.get(i).iterator().next(); // j = 1
            adj.get(j).remove(i); //in adj, 1:<2,3> because remove 0 when i =0, j-1
            if (adj.get(j).size() == 1) newLeaves.add(j);// if 1:<2,3> size =1 , become new leave, here is size 2.
        }
        leaves = newLeaves;
    }
    return leaves;
}
}
